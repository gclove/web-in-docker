# $Id: PKGBUILD 266697 2016-05-01 00:55:57Z seblu $
# Maintainer: shmilee
# Contributor: Bartłomiej Piotrowski <bpiotrowski@archlinux.org>
# Contributor: Sébastien Luttringer
# Contributor: Sergej Pupykin <pupykin.s+arch@gmail.com>
# Contributor: Miroslaw Szot <mss@czlug.icis.pcz.pl>
# Contributor: Daniel Micay <danielmicay@gmail.com>

_pkgname=nginx
_pkgver=1.10.2

### 3rd party modules:
## https://www.nginx.com/resources/wiki/modules/#nginx-3rd-party-modules
## https://github.com/search?utf8=%E2%9C%93&q=nginx+module
_modules_path=/usr/lib/${_pkgname}/modules
_modules_conf=/etc/nginx/modules/available
# psol version: PageSpeed Optimization Library, for ngx_pagespeed
_NPS_VERSION=1.11.33.2
# passenger version, prefix
_PASS_VERSION=5.0.30
_PASS_PREFIX=/usr/lib/${_pkgname}/passenger
# modules depend on ngx_devel_kit, subs_filter
_modules_using_ndk=(array_var encrypted_session form_input iconv lua lua_upstream set_misc)
_modules_using_subs=(google_filter)
# (shortName) (fullName) (version) (downloadUrl)
# format downloadUrl: printf "https://github.com/downloadUrl" fullName version
_githubmodules=(
  'ndk_http      ngx_devel_kit                  0.3.0  simpl/%s/archive/v%s.tar.gz' # add before _modules_using_ndk
  'accounting    ngx_http_accounting_module 3c13f62b08fa9bf6b7d4706ad4e0d9c4b5c2996b lax/%s/archive/%s.tar.gz'
  'array_var     array-var-nginx-module         0.05   openresty/%s/archive/v%s.tar.gz'
  'auth_pam      ngx_http_auth_pam_module       1.5.1  stogh/%s/archive/v%s.tar.gz'
  'auth_spnego   spnego-http-auth-nginx-module 48c6e2e38274ffd04c51ab628adb72af3a94a3a9 stnoonan/%s/archive/%s.tar.gz'
  'concat        nginx-http-concat b8d3e7ec511724a6900ba3915df6b504337891a9 alibaba/%s/archive/%s.tar.gz' # patch src
  'echo          echo-nginx-module              0.60   openresty/%s/archive/v%s.tar.gz'
  'encrypted_session  encrypted-session-nginx-module 0.06 openresty/%s/archive/v%s.tar.gz'
  'enhanced_memcached ngx_http_enhanced_memcached_module 80518efa78974bc0c1e7478e83964441fb2bbd78 bpaquet/%s/archive/%s.tar.gz'
  'eval          nginx-eval-module         2016.06.10  openresty/%s/archive/%s.tar.gz'
  'fancyindex    ngx-fancyindex                 0.4.1  aperezdc/%s/archive/v%s.tar.gz' #10 # patch src
  'form_input    form-input-nginx-module        0.12   calio/%s/archive/v%s.tar.gz'
  'geoip2        ngx_http_geoip2_module         1.1    leev/%s/archive/%s.tar.gz'
  'google_filter ngx_http_google_filter_module  0.2.0  cuber/%s/archive/%s.tar.gz' # patch src
  'headers_more_filter headers-more-nginx-module 0.31  openresty/%s/archive/v%s.tar.gz'
  'http_upsync   nginx-upsync-module 6a840ddf0a1f281af605c4aa59098e3ee9537264 weibocom/%s/archive/%s.tar.gz'
  'iconv         iconv-nginx-module             0.14   calio/%s/archive/v%s.tar.gz'
  'lua           lua-nginx-module               0.10.6 openresty/%s/archive/v%s.tar.gz'
  'lua_upstream  lua-upstream-nginx-module      0.06   openresty/%s/archive/v%s.tar.gz'
  'memc          memc-nginx-module              0.17   openresty/%s/archive/v%s.tar.gz'
  'naxsi         naxsi                          0.55.1 nbs-system/%s/archive/%s.tar.gz' # module path
  'nchan         nchan                          1.0.4  slact/%s/archive/v%s.tar.gz' #20
  "pagespeed     ngx_pagespeed  ${_NPS_VERSION}-beta   pagespeed/%s/archive/v%s.tar.gz" # Split Package # patch src
  "passenger     passenger   release-${_PASS_VERSION}  phusion/%s/archive/%s.tar.gz" # Split Package # module path # patch src
  'push_stream   nginx-push-stream-module       0.5.2  wandenberg/%s/archive/%s.tar.gz'
  'rdns          nginx-http-rdns a32deecaf1fa4be4bd445c2b770283d20bf61da6 flant/%s/archive/%s.tar.gz'
  'redis2        redis2-nginx-module            0.13   openresty/%s/archive/v%s.tar.gz'
  'replace_filter replace-filter-nginx-module 2c7f0656c816e347ba43a7909120d434a168044c openresty/%s/archive/%s.tar.gz'
  'rtmp          nginx-rtmp-module c3237ae747ff0b06494326731e215c23ae884966 sergey-dryabzhinsky/%s/archive/%s.tar.gz'
  'rtmpt_proxy   nginx-rtmpt-proxy-module 62130c9a89b7209842616ae8551f554347e5707d kwojtek/%s/archive/%s.tar.gz'
  'set_misc      set-misc-nginx-module          0.31   openresty/%s/archive/v%s.tar.gz'
  'shibboleth    nginx-http-shibboleth          2.0.0  nginx-shib/%s/archive/v%s.tar.gz' #30
  'small_light   ngx_small_light                0.9.0  cubicdaiya/%s/archive/v%s.tar.gz' # patch src
  'sorted_querystring nginx-sorted-querystring-module 0.3   wandenberg/%s/archive/%s.tar.gz'
  'srcache_filter srcache-nginx-module          0.31   openresty/%s/archive/v%s.tar.gz'
  'ssl_ct        nginx-ct                       1.3.1  grahamedgecombe/%s/archive/v%s.tar.gz'
  'stream_upsync nginx-stream-upsync-module f2515a226131c148555b342cb1439c6307711e67 xiaokai-wang/%s/archive/%s.tar.gz'
  'subs_filter   ngx_http_substitutions_filter_module bc58cb11844bc42735bbaef7085ea86ace46d05b yaoweibin/%s/archive/%s.tar.gz' # patch src
  'testcookie_access testcookie-nginx-module b20b5fde6516303eaec6e83f4154db5c03b7e609 kyprizel/%s/archive/%s.tar.gz'
  'uploadprogress nginx-upload-progress-module afb2d31d1277c50bd6215c470ba94b843349e250 masterzen/%s/archive/%s.tar.gz'
  'upstream_fair nginx-upstream-fair a18b4099fbd458111983200e098b6f0c8efed4bc gnosek/%s/archive/%s.tar.gz' #40 # patch src
  'vhost_traffic_status nginx-module-vts 64e00555a788b93fd279f4c09db69795cf6414db vozlt/%s/archive/%s.tar.gz'
)
# 'brotli ngx_brotli 12529813a9f8475718370a19007c7905601a62ad google/%s/archive/%s.tar.gz' #depends brotli libbrotli
# 'ip-blocker nginx-ip-blocker 4083de37dba7a74bada8519ca4401698d80489b8 tmthrgd/%s/archive/%s.tar.gz' #ip-blocker-agent
# 'log-zmq nginx-log-zmq 808601efabb1856bf83bc7deb6953076fe6ce3b1 alticelabs/%s/archive/%s.tar.gz' #fix config: CORE_INCS,CORE_LIBS
# 'stream-lua stream-lua-nginx-module 97d15ee8e0a969f9a64b676376de33050f94be4b openresty/%s/archive/%s.tar.gz' #luajit, dynamic not support
# 'upstream_check nginx_upstream_check_module d6341aeeb86911d4798fbceab35015c63178e66f yaoweibin/%s/archive/%s.tar.gz' #dynamic not support, patch nginx, fair, upsync
### END

pkgbase=mynginx
pkgname=(mynginx mynginx-pagespeed mynginx-passenger)
pkgver=${_pkgver}
pkgrel=2
_shortNames='3rd party modules'
for _m in "${_githubmodules[@]}";do
  _mod=($_m)
  [[ xpagespeed == x${_mod[0]} ]] && continue
  [[ xpassenger == x${_mod[0]} ]] && continue
  _shortNames+=" ${_mod[0]}"
done
pkgdesc="Lightweight HTTP server and IMAP/POP3 proxy server - with $_shortNames support"
arch=('i686' 'x86_64')
url='http://nginx.org'
license=('custom')
depends=('pcre' 'zlib' 'openssl' 'geoip')
optdepends=('gd: image_filter support'
            'libxslt: xslt_filter support'
            'libmaxminddb: geoip2 support'
            'sregex: replace_filter support'
            'luajit: ngx_lua support'
            'imagemagick: small_light support'
            'krb5: spnego-http-auth support')
makedepends=('hardening-wrapper' 'git' 'gd' 'libxslt' 'libmaxminddb'
             'sregex' 'luajit' 'ruby' 'imagemagick' 'krb5')

source=($url/download/nginx-$pkgver.tar.gz
        service
        logrotate
        passenger-${_PASS_VERSION}.patch
        psol-${_NPS_VERSION}.tar.gz::https://dl.google.com/dl/page-speed/psol/${_NPS_VERSION}.tar.gz)
for _m in "${_githubmodules[@]}";do
  _mod=($_m)
  source+=($(printf "${_mod[1]}-${_mod[2]}.tar.gz::https://github.com/${_mod[3]}" ${_mod[1]} ${_mod[2]}))
done
sha256sums=('1045ac4987a396e2fa5d0011daf8987b612dd2f05181b67507da68cbe7d765c2'
            '4ecbc33ce4bf2965996f51b0c7edb677904ba5cff9a32e93e1487a428d3a751b'
            '2613986dd5faab09ca962264f16841c8c55c3a0bc7a5bb737eabd83143090878'
            'c1b14eb423442fa2b512a3a56f9938d9b025e392918f827ffa75d44683359e4d'
            '1ccb59e81a4cdfd2d8e664c9ee1b31fa2f495aace640d4d14f58319688aaff8e'
            '88e05a99a8a7419066f5ae75966fb1efc409bad4522d14986da074554ae61619'
            'c0d684634aa9a53a4944622304b9e1220b0f8bc4b3cdb81acd7409b508b00136'
            'c949d4be6f3442c8e2937046448dc8d8def25c0e0fa6f4e805144cea45eabe80'
            '77676842919134af88a7b4bfca4470223e3a00d287d17c0dbdc9a114a685b6e7'
            'f5640c40406769b2cb930234b3ed4a86fe70c02998d39ec4426ad16fe3b108f6'
            'e34ef51c299bc3d662b6c74031f7ad9775d73e84cfaa4e72810959fe1760413c'
            '1077da2229ac7d0a0215e9e6817e297c10697e095010d88f1adbd1add1ce9f4e'
            'fa6537c406cee1dc7acd6152d16dba4581d53587860a0642f1b0f7c817ee006d'
            '57b92c9e666b9761907db60daa97723de081e0ab993055c8bef7086e6fdf4e30'
            '6b91d3c2c2f254ebb37eb3dd6dd41048dfb18320bb98a3afdd1ad38b47f6d609'
            '2b00d8e0ad2a67152a9cee7b7ee67990c742d501412df912baaf1eee9bb6dc71'
            '5c1869d55897075adb3fdf840b21060dc54669a1f840a36d1539acc7e59dd106'
            'efa446c10fa4d80ffe8b5e340d83db62474ae7eba091016032b754a1d17a6769'
            '9cd68c8e092efb1a419e1087bb9ca23aab1ff8650c400c0aa815d461d79385de'
            'b2e8162cce2d24861b1ed5bbb30fc51d5215e3f4bb9d01f53fc344904d5911e7'
            '072464f35d9931ea0e97a50da2f61785925a8356ff55d0e778b7359e4e2b09b1'
            'b8b9f355c05c0790226512f6732348a2404d48531688a1fc04ce6768163bf462'
            'b98c4f648589bbf3e2c3d5fd18664e7a7ef89ac083e96c8e984fa919e7a7c073'
            '55475fe4f9e4b5220761269ccf0069ebb1ded61d7e7888f9c785c651cff3d141'
            '25cbe3ff4931283a681260607bc91ae4a922075345d5770b293c6cd7f1e3bdcc'
            '45dd0df7a6b0b6aa9c64eb8c39a8e294d659d87fb18e192cf58f1402f3cdb0a8'
            '212e973a6fda6ce82344815baf6d2324200d1b5c49ac9c34cfc6f0fb5ebcafbb'
            'dfb3c62345ea95e4aec50b449d75bcdf1c868b5c3d62d6c7e0e73632ebe20101'
            '2eb54722ee6a12a3bcd56415efb1e08fd65975d036d5baf6d512250be9cf5b06'
            '1d07f38acdb8194bd49344b0ba21de101070de9b8731d27a8d22e928850bc199'
            'ad4657b140a714a4c1b780c5638a59861a1332cb13a118c27c6d0468c19906b1'
            '1d2486e38cf10390961d507e0e1252e898c8cbc89bbef618f7439d6c23708523'
            'ab1d3bbea62ab9f0b804d286980abe323c735635993c2b82806c7b9abe8186cd'
            '3245b7747fb468cb94e367c4735a29a76bcc42f46ffd8f532e165b6db71d3ca6'
            'df92be13c1ad46c8b3f73768c116cfa544408e8e0caf3e2896b86088f8259d8d'
            '97946a68937b50ab8637e1a90a13198fe376d801dc3e7447052e43c28e9ee7de'
            '0de456da31d5b45225b9d703e76a9a7b47e3dbf21f5d4f8d5ad116699099d67e'
            '5dde5fb5bc32bb943638c06fb94d7ef30eb4af1145e168e54e91c9bb45456776'
            '641d530f97f7206d074f384c96bfefa6db3543077870786c97546451b2275766'
            '3f9729e73a8340926fa9d9fc15707c2f287cd27b6a9fe42e83f660ca48a5972d'
            'c223b642fc541933b9cdb18b771a52ccf728fb309350898080970ab1fda18e6f'
            '8181c7108bad0270c2526196c0c8b361dc090c53e82ca34c40aedf32a729a11d'
            '8eabbcd5950fdcc718bb0ef9165206c2ed60f67cd9da553d7bc3e6fe4e338461'
            '01f9be5338887260b2a56fefd65efc49724460abcbc06fb1aefc7768464cc198'
            '953a7c28a2c9837b8212670df5427403e71a87133011faa69a5546413d16061a'
            'c051d33a8732b671b33e0b3535e6fbbd82311c6d89532c4067b3d2ba738e1ce1'
            'e2eb7d3f8e3778bf885fae18af99d360be1c94cda2353c76b13fb6c094cd54cd')

_common_flags=(
  --with-ipv6
  --with-pcre-jit
  --with-file-aio
  --with-http_addition_module
  --with-http_auth_request_module
  --with-http_dav_module
  --with-http_degradation_module
  --with-http_flv_module
  --with-http_geoip_module
  --with-http_gunzip_module
  --with-http_gzip_static_module
  --with-http_mp4_module
  --with-http_realip_module
  --with-http_secure_link_module
  --with-http_ssl_module
  --with-http_stub_status_module
  --with-http_sub_module
  --with-http_v2_module
  --with-mail
  --with-mail_ssl_module
  --with-stream
  --with-stream_ssl_module
  --with-threads
)

_stable_flags=(
  --with-http_image_filter_module=dynamic
  --with-http_xslt_module=dynamic
)

_3d_party_modules_flags=(
  --modules-path=${_modules_path}
)
for _m in "${_githubmodules[@]}";do
  _mod=($_m)
  if [[ xnaxsi == x${_mod[0]} ]]; then
    _3d_party_modules_flags+=("--add-dynamic-module=../${_mod[1]}-${_mod[2]}/naxsi_src")
  elif [[ xpassenger == x${_mod[0]} ]]; then
    _3d_party_modules_flags+=("--add-dynamic-module=../${_mod[1]}-${_mod[2]}/src/nginx_module")
  else
    _3d_party_modules_flags+=("--add-dynamic-module=../${_mod[1]}-${_mod[2]}")
  fi
done

# usage: _get_module_dir shortName, -> fullName-version
_get_module_dir() {
  local _shortname=$1
  for _m in "${_githubmodules[@]}";do
    _mod=($_m)
    if [[ x$_shortname == x${_mod[0]} ]]; then
      echo ${_mod[1]}-${_mod[2]}
      return 0
    fi
  done
  error "$_shortname Not Found in '_githubmodules' array."
}

prepare() {
  cd $(_get_module_dir 'concat')
  cat >./config <<'EOF'
ngx_addon_name=ngx_http_concat_module
if test -n "$ngx_module_link"; then
    ngx_module_type=HTTP
    ngx_module_name=$ngx_addon_name
    ngx_module_srcs="$ngx_addon_dir/ngx_http_concat_module.c"
    . auto/module
else
    HTTP_MODULES="$HTTP_MODULES $ngx_addon_name"
    NGX_ADDON_SRCS="$NGX_ADDON_SRCS $ngx_addon_dir/ngx_http_concat_module.c"
fi
EOF

  cd ../$(_get_module_dir 'fancyindex')
  sed -i 's/Parent directory/\.\./' ngx_http_fancyindex_module.c template.h
  sed -i 's/File Name/文件名/;s/File Size/文件大小/;s/Date/日期/' template.h # zh ..

  cd ../$(_get_module_dir 'google_filter')
  cat >./config <<'EOF'
ngx_addon_name=ngx_http_google_filter_module
if test -n "$ngx_module_link"; then
    ngx_module_type=HTTP_AUX_FILTER
    ngx_module_name=$ngx_addon_name
    ngx_module_srcs="$ngx_addon_dir/src/*.c"
    . auto/module
else
    HTTP_AUX_FILTER_MODULES="$HTTP_AUX_FILTER_MODULES $ngx_addon_name"
    NGX_ADDON_SRCS="$NGX_ADDON_SRCS $ngx_addon_dir/src/*.c"
    NGX_ADDON_DEPS="$NGX_ADDON_DEPS $ngx_addon_dir/src/*.h"
fi
EOF
sed -i '/apis.*google.*com/a \
                                         "$google_host/!$1",\
                                         "igr"))\
      break;\
    \
    if (ngx_http_google_inject_subs_args(cf,\
                                         "subs_filter", 3, \
                                         "((id)\\.google\\.com)",' src/ngx_http_google_inject.c

  cd ../$(_get_module_dir 'passenger')
  patch -p1 <../passenger-${_PASS_VERSION}.patch
  sh ./gitsubmodules.sh

  cd ../$(_get_module_dir 'small_light')
  ./setup
  sed -i '/^CORE_LIBS=.*CORE_LIBS/d' ./config
  sed -i '/NGX_ADDON_DEPS=.*NGX_ADDON_DEPS/a \
    CORE_LIBS="$CORE_LIBS $ngx_feature_libs"' ./config

  cd ../$(_get_module_dir 'subs_filter')
  cat >./config <<'EOF'
ngx_addon_name=ngx_http_subs_filter_module
if test -n "$ngx_module_link"; then
    ngx_module_type=HTTP_AUX_FILTER
    ngx_module_name=$ngx_addon_name
    ngx_module_srcs="$ngx_addon_dir/ngx_http_subs_filter_module.c"
    . auto/module
else
    HTTP_AUX_FILTER_MODULES="$HTTP_AUX_FILTER_MODULES $ngx_addon_name"
    NGX_ADDON_SRCS="$NGX_ADDON_SRCS $ngx_addon_dir/ngx_http_subs_filter_module.c"
fi
EOF

  cd ../$(_get_module_dir 'upstream_fair')
  cat >./config <<'EOF'
ngx_addon_name=ngx_http_upstream_fair_module
if test -n "$ngx_module_link"; then
    ngx_module_type=HTTP
    ngx_module_name=$ngx_addon_name
    ngx_module_srcs="$ngx_addon_dir/ngx_http_upstream_fair_module.c"
    . auto/module
else
    HTTP_MODULES="$HTTP_MODULES $ngx_addon_name"
    NGX_ADDON_SRCS="$NGX_ADDON_SRCS $ngx_addon_dir/ngx_http_upstream_fair_module.c"
fi
EOF

  cd ../$(_get_module_dir 'pagespeed')
  [ -d psol ] && rm -r psol/
  mv ../psol ./
}

build() {
  cd "$srcdir/$(_get_module_dir 'passenger')"
  rake fakeroot FS_PREFIX=${_PASS_PREFIX} FS_SBINDIR=${_PASS_PREFIX}/bin
  sed -i 's|src/ruby_supportlib|lib/ruby/vendor_ruby|g' ./pkg/fakeroot/${_PASS_PREFIX}/bin/*

  cd "$srcdir/${_pkgname}-${_pkgver}"

  ./configure \
    --prefix=/etc/nginx \
    --conf-path=/etc/nginx/nginx.conf \
    --sbin-path=/usr/bin/nginx \
    --pid-path=/run/nginx.pid \
    --lock-path=/run/lock/nginx.lock \
    --user=http \
    --group=http \
    --http-log-path=/var/log/nginx/access.log \
    --error-log-path=stderr \
    --http-client-body-temp-path=/var/lib/nginx/client-body \
    --http-proxy-temp-path=/var/lib/nginx/proxy \
    --http-fastcgi-temp-path=/var/lib/nginx/fastcgi \
    --http-scgi-temp-path=/var/lib/nginx/scgi \
    --http-uwsgi-temp-path=/var/lib/nginx/uwsgi \
    ${_common_flags[@]} \
    ${_stable_flags[@]} \
    ${_3d_party_modules_flags[@]}

  make
}

package_mynginx() {
  conflicts=('nginx')
  provides=('nginx')
  backup=('etc/nginx/fastcgi.conf'
          'etc/nginx/fastcgi_params'
          'etc/nginx/koi-win'
          'etc/nginx/koi-utf'
          'etc/nginx/mime.types'
          'etc/nginx/nginx.conf'
          'etc/nginx/scgi_params'
          'etc/nginx/uwsgi_params'
          'etc/nginx/win-utf'
          'etc/logrotate.d/nginx')
  install=nginx.install

  cd ${_pkgname}-${_pkgver}
  make DESTDIR="$pkgdir" install

  sed -e 's|\<user\s\+\w\+;|user html;|g' \
    -e '44s|html|/usr/share/nginx/html|' \
    -e '54s|html|/usr/share/nginx/html|' \
    -i "$pkgdir"/etc/nginx/nginx.conf

  rm "$pkgdir"/etc/nginx/*.default

  install -d "$pkgdir"/var/lib/nginx
  install -dm700 "$pkgdir"/var/lib/nginx/proxy

  chmod 750 "$pkgdir"/var/log/nginx
  chown http:log "$pkgdir"/var/log/nginx

  install -d "$pkgdir"/usr/share/nginx
  mv "$pkgdir"/etc/nginx/html/ "$pkgdir"/usr/share/nginx

  install -Dm644 ../logrotate "$pkgdir"/etc/logrotate.d/nginx
  install -Dm644 ../service "$pkgdir"/usr/lib/systemd/system/nginx.service
  install -Dm644 LICENSE "$pkgdir"/usr/share/licenses/${_pkgname}/LICENSE

  rmdir "$pkgdir"/run

  install -d "$pkgdir"/usr/share/man/man8/
  gzip -9c man/nginx.8 > "$pkgdir"/usr/share/man/man8/nginx.8.gz

  for i in ftdetect indent syntax; do
    install -Dm644 contrib/vim/${i}/nginx.vim \
      "${pkgdir}/usr/share/vim/vimfiles/${i}/nginx.vim"
  done

  # add .vhost to ftdetect
  echo "au BufRead,BufNewFile *.vhost set ft=nginx" \
    >> "${pkgdir}/usr/share/vim/vimfiles/ftdetect/nginx.vim"

  # add _modules_conf=/etc/nginx/modules/available
  _objs_dir='./objs'
  install -d "$pkgdir"${_modules_conf}
  for _m in "${_githubmodules[@]}" image_filter xslt_filter; do
    _mod=($_m)
    [[ xpagespeed == x${_mod[0]} ]] && continue
    [[ xpassenger == x${_mod[0]} ]] && continue
    if in_array ${_mod[0]} ${_modules_using_ndk[@]}; then
      find ${_objs_dir} -type f -name "*${_mod[0]}_module.so" \
        | sed "s|${_objs_dir}\(.*$\)|load_module ${_modules_path}\1;|" \
        >> "$pkgdir"${_modules_conf}/1-ndk_http-${_mod[0]}.conf
      continue
    fi
    if in_array ${_mod[0]} ${_modules_using_subs[@]}; then
      find ${_objs_dir} -type f -name "*${_mod[0]}_module.so" \
        | sed "s|${_objs_dir}\(.*$\)|load_module ${_modules_path}\1;|" \
        >> "$pkgdir"${_modules_conf}/1-subs_filter-${_mod[0]}.conf
      continue
    fi
    if [[ xssl_ct == x${_mod[0]} ]]; then
      find ${_objs_dir} -type f -name "*${_mod[0]}_module.so" \
        | sed -e '/ngx_ssl_ct_module.so/d' \
              -e "1i load_module ${_modules_path}/ngx_ssl_ct_module.so;" \
              -e "s|${_objs_dir}\(.*$\)|load_module ${_modules_path}\1;|" \
        >> "$pkgdir"${_modules_conf}/0-${_mod[0]}.conf
      continue
    fi
    find ${_objs_dir} -type f -name "*${_mod[0]}_module.so" \
      | sed "s|${_objs_dir}\(.*$\)|load_module ${_modules_path}\1;|" \
      > "$pkgdir"${_modules_conf}/0-${_mod[0]}.conf
  done

  rm "${pkgdir}${_modules_path}"/ngx_http_passenger_module.so
  rm "${pkgdir}${_modules_path}"/ngx_pagespeed.so
}

package_mynginx-pagespeed() {
  pkgver=${_pkgver}_${_NPS_VERSION}
  pkgdesc='Automatic PageSpeed optimization module for Nginx'
  url='https://github.com/pagespeed/ngx_pagespeed'
  depends=("mynginx=${_pkgver}")
  optdepends=()
  license=('Apache')

  cd ${_pkgname}-${_pkgver}
  install -Dm755 objs/ngx_pagespeed.so "${pkgdir}${_modules_path}"/ngx_pagespeed.so

  install -d "$pkgdir"${_modules_conf}
  echo "load_module ${_modules_path}/ngx_pagespeed.so;" \
    > "$pkgdir"${_modules_conf}/0-pagespeed.conf
}

package_mynginx-passenger() {
  pkgver=${_pkgver}_${_PASS_VERSION}
  pkgdesc='A fast and robust web server and application server for Ruby, Python and Node.js'
  url='https://github.com/phusion/passenger'
  depends=("mynginx=${_pkgver}" ruby)
  optdepends=('python: passenger support for python web apps'
              'nodejs: passenger support for node.js web apps')

  cd ${_pkgname}-${_pkgver}
  install -Dm755 objs/ngx_http_passenger_module.so \
    "${pkgdir}${_modules_path}"/ngx_http_passenger_module.so

  install -d "$pkgdir"${_modules_conf}
  echo "load_module ${_modules_path}/ngx_http_passenger_module.so;" \
    > "$pkgdir"${_modules_conf}/0-passenger.conf

  cp -R "${srcdir}/$(_get_module_dir 'passenger')"/pkg/fakeroot/* "${pkgdir}"/
}

# vim:set ts=2 sw=2 et:
